/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package us.frankkelly.soccer;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * TODO
 * Players per Rotation = Half the bench
 * Different Assignment strategies
 *  - Time per player
 *  - Strongest First Half
 *  - Add random factor
 *  - Alternate Front/Back in 2nd Half
 */
public class App {
    
    private static final int GOALIE = 1;
    private static final int ELEVEN_VS_ELEVEN = 11;
    private List<Player> team;
    private Player firstHalfGoalie, secondHalfGoalie;
    private int lengthOfGameInMinutes=70, rotationsPerHalf=5, playersPerRotation=3;
    private Map<String,Integer> timePerPlayer = new TreeMap<>();

    public static void main(String[] args) {
        new App();
    }
    
    public App() {
        try {
            team = loadTeamFromClasspath( "gr78-red.csv");
            loadPreferences();
            calculateRotationForGame(team, firstHalfGoalie, secondHalfGoalie);
        } catch (Exception e) {
            System.err.println("Exception " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    private Rotation getRotation() {
        return new Rotation433();
    }
    
    private void loadPreferences() {        
        System.out.println("Enter Player # for Goalie for 1st Half: ");
        Scanner scanner = new Scanner(System.in);
        int i = scanner.nextInt();
        if(i < 1 || i > team.size()) {
            System.err.println("There is no player with that #. Exiting . . .");
            System.exit(-1);
        }
        firstHalfGoalie = team.get(i-1);
        System.out.println("Goalie for 1st Half: " + firstHalfGoalie.getName());
        
        System.out.println("Enter Player # for Goalie for 2nd Half: ");
        scanner = new Scanner(System.in);
        i = scanner.nextInt();
        if(i < 1 || i > team.size()) {
            System.err.println("There is no player with that #. Exiting . . .");
            System.exit(-1);
        }
        secondHalfGoalie = team.get(i-1);
        System.out.println("Goalie for 2nd Half: " + secondHalfGoalie.getName());
        scanner.close();
    }
    
    public void calculateRotationForGame(List<Player> team, Player goalie1, Player goalie2) {
        List<Player> fullTeamCopy = new ArrayList<>(team);
        List<Player> teamOnTheSideline = new ArrayList<>(team);
        
        //First Half
        System.out.println("===============");
        System.out.println("= ROTATIONS   =");
        System.out.println("===============");
        int timePerRotation =  lengthOfGameInMinutes/(rotationsPerHalf*2);
        int gameTime = 0;
        
        System.out.println("************");
        System.out.println("* 1ST HALF *");
        System.out.println("************");
        Rotation firstHalfPlayersOnTheField = getRotation();
        firstHalfPlayersOnTheField.setGoalie(goalie1);
        fullTeamCopy.remove(goalie1);
        teamOnTheSideline.remove(goalie1);
        
        //Create initial Rotation
        for(int i=0; i< ELEVEN_VS_ELEVEN - GOALIE; i++) {
            Player p = fullTeamCopy.get(i);
            firstHalfPlayersOnTheField.addPlayer(p); 
            teamOnTheSideline.remove(p);
        }
        firstHalfPlayersOnTheField.print(1, gameTime, gameTime += timePerRotation);
        printSidelineList(teamOnTheSideline);
        printSeparator();        
        
        //Create following rotations
        for(int i=2; i<= rotationsPerHalf; i++) {
            recordPlayingTime(firstHalfPlayersOnTheField, timePerRotation);
            for(int j=0; j< playersPerRotation; j++) {
                Player replaced = firstHalfPlayersOnTheField.replacePlayer(teamOnTheSideline.remove(0));
                teamOnTheSideline.add(replaced);
            }
            
            firstHalfPlayersOnTheField.print(i, gameTime, gameTime += timePerRotation);
            printSidelineList(teamOnTheSideline);
            printSeparator();
        }
        //Record last rotation playing time
        recordPlayingTime(firstHalfPlayersOnTheField, (lengthOfGameInMinutes/2)-gameTime);
        printPlayingTime();
        firstHalfPlayersOnTheField = null;
        
        //Second Half
        System.out.println("************");
        System.out.println("* 2ND HALF *");
        System.out.println("************");
        gameTime = lengthOfGameInMinutes/2;

        Rotation secondHalfRotation = getRotation();
        teamOnTheSideline = new ArrayList<>(team);
        secondHalfRotation.setGoalie(goalie2);
        fullTeamCopy.remove(goalie2);
        teamOnTheSideline.remove(goalie2);
        for(int i=0; i< ELEVEN_VS_ELEVEN - GOALIE; i++) {
            Player p = fullTeamCopy.get((fullTeamCopy.size()-1)-i);
            secondHalfRotation.addPlayer(p); 
            teamOnTheSideline.remove(p);
        }
        secondHalfRotation.print(1, gameTime, gameTime += timePerRotation);
        printSidelineList(teamOnTheSideline);

        
        //Create following Rotations
        for(int i=2; i<= rotationsPerHalf; i++) {
            recordPlayingTime(secondHalfRotation, timePerRotation);
            for(int j=0; j< playersPerRotation; j++) {
                Player replaced = secondHalfRotation.replacePlayer(teamOnTheSideline.remove(0));
                teamOnTheSideline.add(replaced);
            }
            secondHalfRotation.print(i, gameTime, gameTime += timePerRotation);
            printSidelineList(teamOnTheSideline);
        }
        //Record last rotation playing time
        recordPlayingTime(secondHalfRotation, lengthOfGameInMinutes-gameTime);
        
        printPlayingTime();
    }
    
    private void printPlayingTime() {      
        printSeparator();
        System.out.println("* PLAYING TIME TOTALS *");
        for(Map.Entry<String, Integer> entry : timePerPlayer.entrySet()) {
            System.out.println(entry.getKey() + " --> " + entry.getValue() + " mins");
        }
        printSeparator();
    }

    private void printSeparator() {
        System.out.println("-----------------------------------------");    
    }
    
    private void recordPlayingTime(Rotation r, int playingTime) {
        for (String s : r.getPlayerNames()) {
            if (!timePerPlayer.containsKey(s)) {
                timePerPlayer.put(s, playingTime);
            } else {
                int earlierTime = timePerPlayer.get(s);
                timePerPlayer.put(s, earlierTime + playingTime);
            }
        }
        // Useful for debugging playingTime
        // printPlayingTime();
    }

    private void printSidelineList(List<Player> list) {
        System.out.println("Available / Resting");
        for(Player p : list) {
            System.out.println(" " + p.getName() + " " + p.getScore());
        }
        printSeparator();
    }
    
    private List<Player> loadTeamFromClasspath(String fileName) throws Exception {
        Path path = Paths.get(getClass().getClassLoader().getResource(fileName).toURI());
        Stream<String> stream = Files.lines(path);

        List<Player> list = stream.map(Player::getPlayer).collect(Collectors.toList());
        stream.close();
        Collections.sort(list);

        int i = 1;
        for (Player p : list) {
            System.out.println("Player #" + i++ + ") " + p.getName() + " " + p.getScore());
        }
        return Collections.unmodifiableList(list);
    }
}
